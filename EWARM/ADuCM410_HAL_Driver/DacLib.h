/*!
 *****************************************************************************
 * @file:  DACLib.h 
 * @brief: header of Digital to Analog Voltage convertor
 *-----------------------------------------------------------------------------
 *
Copyright (c) 2013-2018 Analog Devices, Inc. All Rights Reserved.

This software is proprietary to Analog Devices, Inc. and its licensors.
By using this software you agree to the terms of the associated
Analog Devices Software License Agreement.
 ******************************************************************************/
#ifndef DAC_LIB_H
#define DAC_LIB_H

#ifdef __cplusplus
extern "C" {
#endif 

#include "ADuCM410.h"


typedef struct                          /*!< pADI_DAC Structure                   */
{                            
    volatile       uint32_t  DACCON;                   /*!< DAC control register                 */
    volatile       uint32_t  RESERVED[11];
    volatile       uint32_t  DACDAT;                   /*!< DAC data register                    */
} ADI_DACx_TypeDef;

#define ADI_DAC0_BASE                       (0x40069800U)
#define ADI_DAC1_BASE                       (0x40069804U)
#define ADI_DAC2_BASE                       (0x40069808U)
#define ADI_DAC3_BASE                       (0x4006980CU)
#define ADI_DAC4_BASE                       (0x40069810U)
#define ADI_DAC5_BASE                       (0x40069814U)
#define ADI_DAC6_BASE                       (0x40069818U)
#define ADI_DAC7_BASE                       (0x4006981CU)
#define ADI_DAC8_BASE                       (0x40069820U)
#define ADI_DAC9_BASE                       (0x40069824U)
#define ADI_DAC10_BASE                      (0x40069828U)
#define ADI_DAC11_BASE                      (0x4006982CU)

#define pADI_DAC0                          ((ADI_DACx_TypeDef *) ADI_DAC0_BASE) 
#define pADI_DAC1                          ((ADI_DACx_TypeDef *) ADI_DAC1_BASE)
#define pADI_DAC2                          ((ADI_DACx_TypeDef *) ADI_DAC2_BASE)
#define pADI_DAC3                          ((ADI_DACx_TypeDef *) ADI_DAC3_BASE)
#define pADI_DAC4                          ((ADI_DACx_TypeDef *) ADI_DAC4_BASE)
#define pADI_DAC5                          ((ADI_DACx_TypeDef *) ADI_DAC5_BASE)
#define pADI_DAC6                          ((ADI_DACx_TypeDef *) ADI_DAC6_BASE)
#define pADI_DAC7                          ((ADI_DACx_TypeDef *) ADI_DAC7_BASE)
#define pADI_DAC8                          ((ADI_DACx_TypeDef *) ADI_DAC8_BASE)
#define pADI_DAC9                          ((ADI_DACx_TypeDef *) ADI_DAC9_BASE)
#define pADI_DAC10                         ((ADI_DACx_TypeDef *) ADI_DAC10_BASE)
#define pADI_DAC11                         ((ADI_DACx_TypeDef *) ADI_DAC11_BASE)

typedef struct 
{
   /*
    Drive Ability Boost Enable, Can Drive 10mA Load. Improve the drive ability.
    drive ablity bit mask ---- BITM_DAC_DACCON_N__DRV
    Normal Work Mode ---- ENUM_DAC_DACCON_N__DRV_NORMAL
    Drive Ability Boost Mode ---- ENUM_DAC_DACCON_N__DRV_DRIVEBOOST
   */
    uint32_t driveAblityEn;

   /*
      0 - Enable DAC
      1 - disable
   */
    uint32_t powerDown;

   /*
    Select Output Full Scale. DAC have 2 Full Scale options. 
    '0': Full Scale Voltage is 2.5V. 
    '1': Full Scale Voltage is 3.3V.
    Output Full Scale bit mask ---- BITM_DAC_DACCON_N__FSLVL  
    Full Scale is 2.5V ---- ENUM_DAC_DACCON_N__FSLVL_OUT2P5
    Full Scale is 3.3V ---- ENUM_DAC_DACCON_N__FSLVL_OUT3V3
   */
    uint32_t fullScale;

   /*
    DAC Input Data Clear, Won't Be Controlled by Sync Mode. Reset dac_data to '0', low active.
    DAC Input Data Clear bit mask ---- BITM_DAC_DACCON_N__EN 
    DAC Data Clear ---- ENUM_DAC_DACCON_N__EN_CLEAR
    DAC Data Normal Input ---- ENUM_DAC_DACCON_N__EN_CLEAROFF
   */
    uint32_t dataClear;

   /*
    DAC Input Data. 
    1. can only be writable if corresponding dataclrb is high, otherwise throw away PWDATA 
    2. if dataclrb_wstb is 1 and corresponding PWDATA bit is 0, clear this register to 0.
    To satisfy these two requirements, RTL can't be auto-generated by yoda.
    dataIn[27:12]
    MSB 12-bit field is the digital input code 0~4095 to be converted to DAC output
    LSB 4-bit is the digital input code for Interpolation

    DAC Sync Bits. DAC sync bits. These 12 bits are common to the 12 DACs. 
    Each bit set to 1 will prevent the corresponding channel from updating immediately. 
    Such a channel will update when the bit changes to 0.
    dataIn[11:0]
   */
   uint32_t data;
}DAC_CHAN_SETUP_t;

typedef struct
{
   DAC_CHAN_SETUP_t dacChan[12];
}DAC_SETUP_t;

extern DAC_SETUP_t gDACSetup;

//------------------------------ Function prototypes ------------------------------------------
extern void DACSetup(DAC_SETUP_t *pSetup);

extern uint32_t DacWr(ADI_DACx_TypeDef *pPort, uint32_t uiData);
extern uint32_t DacCfg(ADI_DACx_TypeDef *pPort, uint32_t uiPD, uint32_t uiDrv, uint32_t uiFullScale);
extern uint32_t DacInputDataClear(ADI_DACx_TypeDef *pPort, uint32_t uiDatClr);
extern uint32_t DacPwrDwn(ADI_DACx_TypeDef *pPort, uint32_t uiPdCfg);

#ifdef __cplusplus
}
#endif

#endif   //#DAC_LIB_H
